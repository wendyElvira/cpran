#!/usr/bin/env perl
# ABSTRACT: A Perl client for CPrAN - the package manager for Praat

our $VERSION = '0.0406'; # VERSION

BEGIN {
  our @ORIGARGV = @ARGV;
}

use CPrAN;
use Log::Any::Adapter;

use Getopt::Long qw( :config pass_through );
my %h;
$h{pref_dir} = $ENV{CPRAN_PREF_DIR}  if defined $ENV{CPRAN_PREF_DIR};
$h{root}     = $ENV{CPRAN_ROOT_DIR}  if defined $ENV{CPRAN_ROOT_DIR};
$h{praat}    = $ENV{CPRAN_PRAAT_BIN} if defined $ENV{CPRAN_PRAAT_BIN};
$h{token}    = $ENV{CPRAN_API_TOKEN} if defined $ENV{CPRAN_API_TOKEN};

GetOptions(
  \%h,
  "praat=s",
  "root=s",
  "pref_dir|pref-dir=s",
  "token=s",
  "url=s",
  "group=s",
  "version",
  "quiet",
  "verbose|v+",
  "debug+",
  "help",
  "yes",
);

if (defined $h{debug}) {
  Log::Any::Adapter->set('Stderr');
} else {
  Log::Any::Adapter->set('Stderr', log_level => 'warn' );
}

my $app = CPrAN->new(\%h);

{
  local @ARGV = @ORIGARGV;
  $app->run;
}

=encoding utf8

=head1 NAME

B<CPrAN> - A package manager for Praat

=head1 SYNOPSIS

cpran <command> [global options] [options] [arguments]

=head1 DESCRIPTION

B<cpran> is the main script for an L<App::Cmd> application to search, install,
remove and update Praat plugins.

=head2 Commands

=over

=item B<update>

    cpran update [options]
    cpran update [options] [names]

CPrAN keeps a list of the available plugins, with information about each one,
including what its latest version is and who is in charge of maintaining it.

As its name implies, the B<update> command takes care of keeping this list up to
date, and as such it should probably be the first command to run.

The list is currently implemented as individual files in the .cpran directory,
which is under the CPrAN root. See L<CPrAN::Command::update|update> for the full
documentation.

=item B<search>

    cpran search [options] [regex [regex...]]

B<search> makes it possible to look for plugins in the plugin list. If you are
not sure about the name of a plugin, you can use B<search> to explore the list
and try to find it. Or you can just use it to browse, to find unknown plugins
that might do what you need.

B<search> will return a list of all plugin names that match the provided regular
expression. By default, the query is performed against the plugin's name and short
and long descriptions. You can specify these with the C<--name> option, to limit
the search to names, or the C<--description> option, to only consider descriptions.

More than one regex query can be provided by separating them with spaces. In this
case, results from the search will include those plugins for which all queries
apply. If you want to use a query that contains a space, you'll have to quote it.

B<search .*> will show the entire list of plugins (beware that this might be a
long list!). Alternatively, you can use the B<list> command, which is simply an
alias for this query.

See L<CPrAN::Command::search|search> for the full documentation.

=item B<show>

    cpran show [options] [names]

Each plugin has a descriptor with general information about the plugin,
including its name, version, homepage, maintainer, description, etc. B<show>
allows you to read the contents of this file.

By default, it will show you the descriptors downloaded by B<update>, but you
can also use the B<--installed> option to read the descriptors of installed
plugins.

See L<CPrAN::Command::show|show> for the full documentation.

=item B<install>

    cpran install [options] [names]

Once you've found a plugin with B<search> and figured out if you want to install
it or not thanks to B<show>, you can use B<install> to download a copy of the
latest version to your local Praat preferences directory. If the plugin's
descriptor specifies any dependencies, B<install> will also offer to install
these.

You also use B<install> to re-install a plugin that has already been installed
with the B<--reinstall> option. This is useful if your local version somehow
becomes corrupted (eg, if you've accidentally deleted files from within it).

Plugins will be tested before installation, and only those that pass all tests
will be installed. You can change this behaviour by using the B<--force> option,
which will disregard the results of the tests and proceed with installation (not
recommended!).

See L<CPrAN::Command::install|install> for the full documentation.

=item B<upgrade>

    cpran upgrade
    cpran upgrade [options] [names]

If a new version of an installed plugin has been released, you can use
B<upgrade> to bring your local installation up to date. You can specify a name
to upgrade that individual plugin, or you can call it with no arguments to
upgrade all plugins that are out of date.

See L<CPrAN::Command::upgrade|upgrade> for the full documentation.

=item B<remove>

    cpran remove [options] [names]

If you are not going to be using a plugin anymore, you can remove it with
B<remove>.

See L<CPrAN::Command::remove|remove> for the full documentation.

=item B<test>

    cpran test [options] [names]

By default, part of the installation process involves testing the downloaded
plugin to make sure that things are working as expected. Both the testing and
the aggregation of the test results is done by B<test>.

The command can be run manually on any downloaded plugin. When given the name of
a plugin, regardless of whether it is a CPrAN plugin or not, it will look in
that plugin's directory for a test directory.

By default and convention, the test directory is named C<t> and resides at the
root of the plugin. Within this directory, all files that have a C<.t> extension
will be regarded as tests. Tests are all run by Praat, and they are expected to
conform to the L<Test Anything Protocol|http://testanything.org/> for correct
evaluation. You might want to look at the
L<testsimple|https://gitlab.com/cpran/plugin_testsimple> plugin to make it
easier to write your own tests.

See L<CPrAN::Command::test|test> for the full documentation.

=back

=head2 Options

=over

=item B<--praat>=PATH

The path to use as the preferences directory for Praat. See the FILES section
for information on the platform-dependant default values used.

=item B<--cpran>=PATH

The path to use as the CPrAN root directory. See the FILES section
for information on the platform-dependant default values used.

=item B<--api-token>=TOKEN

=item B<--api-group>=GROUP_ID

=item B<--api-url>=URL

These options set the credentials to talk to the GitLab API to obtain the
plugin archives and descriptors. As such, it is implementation-dependant, and is
currently tied to GitLab. These options are particularly useful if using CPrAN
as an in-house plugin distribution system.

=item B<--verbose>, B<--v>

Increase the verbosity of the output. This option can be called multiple times
to make the program even more talkative.

=item B<--quiet>, B<--q>

Opposed to B<--verbose>, this option I<suppresses> all output. If both options
are set simultaneously, this one takes precedence.

=item B<--debug>, B<--D>

Enables the output of debug information. Like B<--verbose>, this option can be
used multiple times to increase the number of debug messages that are printed.

=back

=head1 EXAMPLES

    # Update the list of known plugins
    cpran update
    # Shows the entire list of known plugins
    cpran search .*
    # Search in the known plugin list for something
    cpran search something
    # Search in the installed plugin list for something
    cpran search -i something
    # Show the descriptor of a plugin by name
    cpran show name
    # Install a plugin by name
    cpran install name
    # Upgrade all plugins to their most recent version
    cpran upgrade
    # Upgrade a plugin by name to its most recent version
    cpran upgrade name
    # Remove a plugin by name from disk
    cpran remove name

=head1 FILES

=head2 The preferences directory

B<CPrAN> needs read and write access to I<Praat>'s preferences directory. The
exact location for this directory varies according to the platform, so B<CPrAN>
will keep the path to it, accessible through CPrAN::praat().

Below are the default locations for the main supported platforms:

=over

=item I<UNIX>

C<~/.praat-dir>

=item I<Macintosh>

C</Users/username/Library/Preferences/Praat Prefs>

=item I<Windows>

C<C:\Documents and Settings\username\Praat>

=back

Where C<username> is, of course, the name of the active user.

=head2 Plugin descriptors

B<CPrAN> plugins are identified as such by the presence of a I<plugin
descriptor> in the plugin's root. The descriptor (named C<cpran.yaml>) is a YAML
file with fields that identify the name and version of the plugin, what it does,
what its requirements are, etc.

A commented example is bundled with this module as C<example.yaml>, but here is
a version stripped of comments, for simplicity:

    ---
    Plugin: name
    Homepage: https://example.com
    Version: 1.2.3
    Maintainer: A. N. Author <author@example.com>
    Depends:
      praat: 5.0.0+
    Recommends:
    License:
      - GPL3 <https://www.gnu.org/licenses/gpl-3.0.html>
      - MIT <http://opensource.org/licenses/MIT>
    Readme: readme.md
    Description:
      Short: an example of a plugin descriptor
      Long: >
        This file serves as an example of a CPrAN plugin descriptor.

        This long description is optional, but very useful to have.
        Line breaks in the long description will be converted to
        spaces, but you can start a new paragraph by using a blank
        line.

        Like so.

B<CPrAN> uses YAML::XS to attempt to parse the descriptor. Any error in parsing
will be treated by B<CPrAN> in the same way as if the file was missing, so it's
important to properly validate the descriptor beforehand.

=head2 The plugin list

To keep track of available plugins, B<CPrAN> keeps the descriptors for all the
plugins it knows about, and queries them for information when necessary. This is
the list that known() looks in, and the list from where the B<show> command gets
its data.

The descriptors are saved in a B<CPrAN> root folder whose path is stored
internally and accessible through CPrAN::root(). By default, it will be a
directory named C<.cpran> in the root of the B<CPrAN> plugin (CPrAN::praat() .
'/plugin_cpran'). In that directory, the descriptors are renamed with the name
of the plugin they represent.

This list is updated with the B<update> command.

=head1 AUTHOR

José Joaquín Atria <jjatria@gmail.com>

=head1 LICENSE

Copyright 2015 José Joaquín Atria

This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

=head1 SEE ALSO

L<CPrAN|cpran>,
L<CPrAN::Plugin|plugin>,
L<CPrAN::Command::install|install>,
L<CPrAN::Command::remove|remove>,
L<CPrAN::Command::search|search>,
L<CPrAN::Command::show|show>,
L<CPrAN::Command::test|test>,
L<CPrAN::Command::update|update>,
L<CPrAN::Command::upgrade|upgrade>

=cut
